# -*- coding: utf-8 -*-
"""serieTemporalExemplo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GEw2b0HbY6_EdpO_fUKB7jl6RTKkmnqX

Análise de Séries Temporais no Python

1- Importando as Bibliotecas
"""

import pandas as pd
from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

"""2- Dados"""

qtd_amostras =100
media = 1000
desvio_padrao = 80
periodo = pd.date_range("2020-1-1", periods=qtd_amostras)
valor = np.random.normal(loc=media,scale=desvio_padrao,size=qtd_amostras)
dicionario = dict(data=periodo,valor=valor)
df = pd.DataFrame(dicionario)
df.head()

"""3- Plotar os dados"""

plt.plot(df['data'], 
         df['valor'], 
         color='red', 
         marker='o')

plt.title('Série Temporal', fontsize=14)
plt.xlabel('Periodo', fontsize=14)
plt.ylabel('Valor', fontsize=14)
plt.legend(labels=['Valor'],loc='best')
plt.grid(True)
plt.show()

g = sns.relplot(x="data", 
                y="valor", 
                kind="line", 
                data=df,
                color='green', 
                marker='o')

g.figure.autofmt_xdate()

"""4- Série Temporal

Transformar da data em índice
"""

df.set_index('data', inplace=True)

"""Decomposicao: modelo aditivo


"""

result = seasonal_decompose(df, model='additive')  
result.plot();

"""Decomposicao: modelo multiplicativo


"""

result = seasonal_decompose(df, model='multiplicative')
result.plot();

"""5- Metodos Classicos

Medias Moveis (Suavizacao)
"""

mm = pd.DataFrame.rolling(df,window=12,center=False).mean()
orig = plt.plot(df, color='blue',label='Original')
mean = plt.plot(mm, color='red',label='Media')
plt.legend(loc='best')
plt.show()

"""Suavizacao de HoltWinters


"""

# Holt Winters 
# Suavização Exponencial Simples
from statsmodels.tsa.holtwinters import SimpleExpSmoothing
# Parametros: m (periodo) e alpha - nivel de suavizacao (https://www.statsmodels.org/dev/generated/statsmodels.tsa.holtwinters.SimpleExpSmoothing.fit.html#statsmodels.tsa.holtwinters.SimpleExpSmoothing.fit)
m = 12
alpha = 1/(2*m)
df['Suavizacao HW'] = SimpleExpSmoothing(df['valor']).fit(smoothing_level=alpha,
                                                          optimized=False,
                                                          use_brute=True).fittedvalues
df[['valor','Suavizacao HW']].plot(title='Holt Winters Suavização Exponencial Simples');